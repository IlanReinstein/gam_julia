1:4/5
source('~/.active-rstudio-document', echo=TRUE)
rk<-function(x,z) # R(x,z) for cubic spline on [0,1]
{ ((z-0.5)^2-1/12)*((x-0.5)^2-1/12)/4-
((abs(x-z)-0.5)^4-(abs(x-z)-0.5)^2/2+7/240)/24 }
spl.X<-function(x,xk)
# set up model matrix for cubic penalized regression spline
{ q<-length(xk)+2
n<-length(x)
X<-matrix(1,n,q)
X[,2]<-x
X[,3:q]<-outer(x,xk,FUN=rk) # and remaining to R(x,xk) X
# number of parameters
# number of data
# initialized model matrix
# set second column to x
}
xk<-1:4/5 # choose some knots
xk
spl.X(x,xk)
spl.X<-function(x,xk)
# set up model matrix for cubic penalized regression spline
{ q<-length(xk)+2
n<-length(x)
X<-matrix(1,n,q)
X[,2]<-x
X[,3:q]<-outer(x,xk,FUN=rk) # and remaining to R(x,xk) X
}
xk<-1:4/5 # choose some knots
X<-spl.X(x,xk) # generate model matrix
View(X)
spl.X<-function(x,xk)
# set up model matrix for cubic penalized regression spline
{ q<-length(xk)+2
n<-length(x)
X<-matrix(1,n,q)
X[,2]<-x
X[,3:q]<-outer(x,xk,FUN=rk) # and remaining to R(x,xk)
X
}
xk<-1:4/5 # choose some knots
X<-spl.X(x,xk) # generate model matrix
View(X)
lm(wear ~X-1)
X-1
X
xk<-1:4/5 # choose some knots
X<-spl.X(x,xk) # generate model matrix
mod.1<-lm(wear ~ X - 1) # fit model
xp<-0:100/100 # x values for prediction
Xp<-spl.X(xp,xk) # prediction matrix
lines(xp,Xp%*%coef(mod.1)) #
X
mod.1
X - 1
X
X - 1
mod.1
mod.1 <- lm(wear ~ X) # fit model
xp<-0:100/100 # x values for prediction
Xp<-spl.X(xp,xk) # prediction matrix
lines(xp,Xp%*%coef(mod.1)) #
source('~/.active-rstudio-document', echo=TRUE)
Xp
coef(mod.1)
source('~/.active-rstudio-document', echo=TRUE)
lm(wear ~ X)
coef(mod.1
)
mod.1 <- lm(wear ~ X - 1) # fit model
xp<-0:100/100 # x values for prediction
Xp<-spl.X(xp,xk) # prediction matrix
lines(xp,Xp%*%coef(mod.1)) #
1:7
1:7/8
lambda<-1e-8;n<-length(wear);V<-0
prs.fit(wear,x,xk,lambda)
spl.S<-function(xk)
# set up the penalized regression spline penalty matrix,
# given knot sequence xk
{ q<-length(xk)+2;S<-matrix(0,q,q) # initialize matrix to 0
S[3:q,3:q]<-outer(xk,xk,FUN=rk) # fill in non-zero part
S }
mat.sqrt<-function(S) # A simple matrix square root
{ d<-eigen(S,symmetric=TRUE)
rS<-d$vectors%*%diag(d$valuesË†0.5)%*%t(d$vectors) }
mat.sqrt<-function(S) # A simple matrix square root
{ d<-eigen(S,symmetric=TRUE)
rS<-d$vectors%*%diag(d$values^0.5)%*%t(d$vectors) }
prs.fit<-function(y,x,xk,lambda)
# function to fit penalized regression spline to x,y data, # with knots xk, given smoothing parameter, lambda
{ q<-length(xk)+2 # dimension of basis
n<-length(x) # number of data
# create augmented model matrix ....
Xa <- rbind(spl.X(x,xk),mat.sqrt(spl.S(xk))*sqrt(lambda))
y[(n+1):(n+q)]<-0 # augment the data vector
lm(y ~ Xa-1) # fit and return the penalized regression spline
}
mod<-prs.fit(wear,x,xk,lambda) # fit model, given lambda
influence(mod)
?influence
influence(mod)$hat
sum(influence(mod)$hat[1:n])
influence(mod)$hat
influence(mod)$hat[1:n]
sum(influence(mod)$hat[1:n])
lambda<-1e-8;n<-length(wear);V<-0
n
spl.X(x,xk)
y[(n+1):(n+q)]
prs.fit(wear,x,xk,lambda)
influence(mod)
size<-c(1.42,1.58,1.78,1.99,1.99,1.99,2.13,2.13,2.13, 2.32,2.32,2.32,2.32,2.32,2.43,2.43,2.78,2.98,2.98)
wear<-c(4.0,4.2,2.5,2.6,2.8,2.4,3.2,2.4,2.6,4.8,2.9, 3.8,3.0,2.7,3.1,3.3,3.0,2.8,1.7)
x<-size-min(size);x<-x/max(x)
plot(x,wear,xlab="Scaled engine size",ylab="Wear index")
rk<-function(x,z) # R(x,z) for cubic spline on [0,1]
{ ((z-0.5)^2-1/12)*((x-0.5)^2-1/12)/4-
((abs(x-z)-0.5)^4-(abs(x-z)-0.5)^2/2+7/240)/24 }
spl.X<-function(x,xk)
# set up model matrix for cubic penalized regression spline
{ q<-length(xk)+2
n<-length(x)
X<-matrix(1,n,q)
X[,2]<-x
X[,3:q]<-outer(x,xk,FUN=rk) # and remaining to R(x,xk)
X
}
xk<-1:4/5 # choose some knots
X<-spl.X(x,xk) # generate model matrix
mod.1 <- lm(wear ~ X - 1) # fit model
xp<-0:100/100 # x values for prediction
Xp<-spl.X(xp,xk) # prediction matrix
lines(xp,Xp%*%coef(mod.1)) #
spl.S<-function(xk)
# set up the penalized regression spline penalty matrix,
# given knot sequence xk
{ q<-length(xk)+2;S<-matrix(0,q,q) # initialize matrix to 0
S[3:q,3:q]<-outer(xk,xk,FUN=rk) # fill in non-zero part
S }
mat.sqrt<-function(S) # A simple matrix square root
{ d<-eigen(S,symmetric=TRUE)
rS<-d$vectors%*%diag(d$values^0.5)%*%t(d$vectors) }
prs.fit<-function(y,x,xk,lambda)
# function to fit penalized regression spline to x,y data, # with knots xk, given smoothing parameter, lambda
{ q<-length(xk)+2 # dimension of basis
n<-length(x) # number of data
# create augmented model matrix ....
Xa <- rbind(spl.X(x,xk),mat.sqrt(spl.S(xk))*sqrt(lambda))
y[(n+1):(n+q)]<-0 # augment the data vector
lm(y ~ Xa-1) # fit and return the penalized regression spline
}
prs.fit(wear,x,xk,0.0001)
mod.2<-prs.fit(wear,x,xk,0.0001) # fit pen. reg. spline
Xp
Xp<-spl.X(xp,xk) # matrix to map params to fitted values at xp
plot(x,wear);lines(xp,Xp%*%coef(mod.2)) # plot data & spl. fit
lambda<-1e-8;n<-length(wear);V<-0
prs.fit(wear,x,xk,0.0001)
length(xk)+2
xk<-1:7/8 # choose some knots
xk<-1:7/8
length(xk)+2
Xp<-spl.X(xp,xk) # matrix to map params to fitted values at xp
plot(x,wear);lines(xp,Xp%*%coef(mod.2)) # plot data & spl. fit
lambda<-1e-8;n<-length(wear);V<-0
xk<-1:7/8 # choose some knots
mod.2<-prs.fit(wear,x,xk,0.0001) # fit pen. reg. spline
Xp<-spl.X(xp,xk) # matrix to map params to fitted values at xp
plot(x,wear);lines(xp,Xp%*%coef(mod.2)) # plot data & spl. fit
lambda<-1e-8;n<-length(wear);V<-0
length(wear)
prs.fit(wear,x,xk,lambda)
influence(mod)
xk
1:7/8
n<-length(x)
n
lambda<-1e-8
length(wear)
mod<-prs.fit(wear,x,xk,lambda) # fit model, given lambda
model.matrix(mod)
X = model.matrix(mod) # X model matrix
X%*%(solve(t(X)%*%X)%*%t(X))
model.matrix(mod)
?solve
solve(t(X)%*%X)%*%t(X)
t(X)%*%X)%*%t(X)
solve(t(X)%*%X)
X%*%(solve(t(X)%*%X)%*%t(X))
diag(hat_matrix)[1]
hat_matrix = X%*%(solve(t(X)%*%X)%*%t(X)) # Hat matrix
diag(hat_matrix)[1]
diag(hat_matrix)
lm(mpg ~ wt, mtcars[-1,])
mtcars[1,'wt']
fitwithout1 = lm(mpg ~ wt, mtcars[-1,]) # OLS excluding first data point.
new = data.frame(wt=mtcars[1,'wt']) # Predicting y hat in this OLS w/o first point.
predict(fitwithout1, newdata=new)
q <- 10
data(trees)
1:(q - 2)/(q - 1)
quantile(unique(trees$Girth), 1:(q - 2)/(q - 1))
